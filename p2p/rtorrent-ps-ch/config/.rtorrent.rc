# ~/.rtorrent.rc and enable/modify the options as needed. Remember to uncomment the options you wish to enable.


##### begin: Including config settings #####

# Custom string that can help to use different config files, scripts with different setups based on naming. It can be an empty string as well.
method.insert = cfg.postfix, string|const|private, (cat,"")

# Imports main config conf "~/.rtorrent-config.rc" file
import = (cat,"~/.rtorrent",(cfg.postfix),"-config.rc")

##### end: Including config settings #####



##### begin: Including PyroScope settings #####

# Set "pyro.extended" to 1 if rTorrent-PS is used. LEAVE THIS AT 0 IF YOU RUN A VANILLA rTorrent!
method.insert = pyro.extended,    value|const, (system.has, rtorrent-ps)

# Set "pyro.extended.ch" to 1 to activate rTorrent-PS-CH features! LEAVE THIS AT 0 IF YOU DO NOT RUN IT!
method.insert = pyro.extended.ch, value|const|private,  1

# Set "pyro.bin_dir" to the "bin" directory where you installed the pyrocore tools! Make sure you end it with a "/"; if this is left empty, then the shell's path is searched.
method.insert = pyro.bin_dir,     string|const|private, (cat,"~/bin/")

# helper method: to import specified conf file as a parameter from "~/.pyroscope/" directory.
method.insert = pyro.import, simple, "import=(cat,\"~/.pyroscope/\",(argument.0))"
# Imports main pyroscope conf "~/.pyroscope/rtorrent-ps.rc" file
pyro.import = (cat,"rtorrent-ps",(cfg.postfix),".rc")

##### end: Including PyroScope settings #####



##### begin: Directory methods #####

### begin: Common helper methods ###
# gets the full path of data of a torrent (it's a workaround for the possibly empty 'd.base_path' attribute)
method.insert = d.data_path, simple, "if=(d.is_multi_file), (cat,(d.directory)), (cat,(d.directory),/,(d.name))"

# gets the full path of the session file
method.insert = d.session_file, simple, "cat=(session.path),(d.hash),.torrent"

# helper method: set/unset unsafe_data attrib (possible values: "","1","2")
method.insert = d.unsafe_data.set, simple|private, "d.custom.set=unsafe_data,(argument.0); d.save_resume="
# helper method: sets priority and throttle (or removes it) for torrents based upon its arguments
method.insert = d.modify_rest, simple|private, "d.priority.set=(argument.0); d.throttle_name.set=(argument.1)"
# helper method: calls 'd.modify_rest' method with the proper arguments based upon whether a throttled download is private; other torrents: sets priority to low, sets slowup or tardyup throttle group
method.insert = d.is_private_throttled, simple|private, "branch=((d.is_private)),((d.modify_rest,1,slowup)),((d.modify_rest,1,tardyup))"
# helper method: calls 'd.modify_rest' or 'd.is_private_throttled' method with the proper arguments based upon the 2nd argument; special group: sets priority to normal, removes throttle group
method.insert = d.is_special_group, simple|private, "branch=((argument.0)),((d.modify_rest,2,)),((d.is_private_throttled))"
# helper method: sets custom 'data_dir', 'meta_dir', 'orig_category' variables, priority, throttle of a torrent. Requires 2 parameters, usage e.g.: 'd.attribs.set.helper=rotating,1'
method.insert = d.attribs.set.helper, simple|private, "d.custom.set=data_dir,(cat,(cfg.dir.main),(argument.0)); d.custom.set=meta_dir,(cat,(cfg.dir.meta_compl),(argument.0)); d.custom.set=orig_category,(cat,(argument.0)); d.is_special_group=(argument.1)"
# helper method: calls 'd.attribs.set.helper' method (sets custom 'data_dir', 'meta_dir', 'orig_category' variables, priority, throttle) and sets 'unsafe_data' variable of a torrent. Requires 3 parameters, usage e.g.: 'd.attribs.set=unsafe,,1'
method.insert = d.attribs.set, simple|private, "d.attribs.set.helper=(argument.0),(argument.1); branch=((argument.2)),((d.unsafe_data.set,1))"

# helper method: checks existence of a directory, file, symlink
method.insert = check_object.value, simple|private, "execute.capture=bash,-c,\"$cat=\\\"test -\\\",$argument.2=,\\\" \\\\\\\"\\\",$argument.0=,$argument.1=,\\\"\\\\\\\" && echo -n 1 || echo -n\\\"\""
# helper method: displays error if an object doesn't exist
method.insert = check_object.error.print, simple|private, "print=\"$cat=Error\\\\\ during\\\\\ moving\\\\\ ,$argument.2=,!\\\\\ No\\\\\ such\\\\\ ,$argument.3=,:\\\\\ ,$argument.0=,$argument.1=\""
### end: Common helper methods ###


### begin: Delete data (dir/files) for torrents that have been removed either from the UI (CTRL+dd) or the tied metafile has been removed manually or by a script, ###
#     only for torrents that have the unsafe_data custom field set or which are in the incmoplete dir (useful to delete data of stucked torrents)
#     and their data dir/file exist and which are not partially done magnet-meta downloads and which were not magnet downloads.
#     This allows rotating capability.
# Removes torrents from client when its metafile (torrent file) has been deleted manually or by a script. If inotify isn't used: Run it every 5 seconds, otherwise run only once when rtorrent is started.
#temp#branch = ((cfg.inotify.use)), ((schedule2, untied_torrents, 99, 0, ((untied.remove)))), ((schedule2, untied_torrents, 8, 10, ((untied.remove))))
branch = ((cfg.inotify.use)), ((schedule2, untied_torrents, 99, 0, ((untied.remove)))), ((schedule2, untied_torrents, 8, 10, ((untied.remove))))
# helper method: gets the incomplete dir data path of a torrent
method.insert = d.get_incomplete_path, simple|private, "cat=$directory.default=,$d.name="
# helper method: checks whether the data of a torrent is in incomplete dir
method.insert = d.compare_incomplete_path, simple|private, "equal={d.get_incomplete_path=,d.data_path=}"
# helper method: prints out an error message if the current data path of the torrent doesn't exist or its data is bogus
method.insert = d.remove_data.error.print, simple|private, "print=\"$cat=ERROR\\\\\ during\\\\\ deleting:\\\\\ ,$argument.0=,\\\\\ !\\\\\ Data\\\\\ path\\\\\ doesn't\\\\\ exist\\\\\ or\\\\\ torrent\\\\\ has\\\\\ bogus\\\\\ data.\""
# helper method: deletes data of a torrent and removes symlink for its metafile if it exists
method.insert = d.remove_data.helper, simple|private, "d.remove_symlink=;execute2={rm,-rf,--,$d.data_path=}"
# Deletes data of a torrent and removes symlink for its metafile  (calls 'd.remove_data.helper' if data dir/file of a torrent exist and its data is not bogus or prints out an error message)
method.insert = d.remove_data, simple, "branch=\"and={d.name=,d.data_full_path_exist=,\\\"or=d.compare_incomplete_path=,d.compare_data_path=\\\"}\",d.remove_data.helper=,d.remove_data.error.print=$d.data_path="
# Deletes data of a torrent and removes symlink for its metafile if a torrent has been removed (either from UI or manually) for torrents that have unsafe_data custom field set or which are in the incmoplete dir and their data dir/file exist and which are not partially done magnet-meta downloads and which were not magnet downloads.
# !!! 'd.is_meta' command requires rtorrent-PS-CH >= v1.4 or rtorrent/rtorrent-PS with the patch !!!
#temp#method.set_key = event.download.erased, remove_files, "branch=\"and={not=$d.custom=was_meta,\\\"or=not=$d.is_meta=,d.is_not_partially_done=\\\",\\\"or=d.custom=unsafe_data,d.compare_incomplete_path=\\\"}\",d.remove_data="
method.set_key = event.download.erased, remove_files, "branch=\"and={not=$d.custom=was_meta,\\\"or=not=$d.is_meta=,d.is_not_partially_done=\\\",\\\"or=d.custom=unsafe_data,d.compare_incomplete_path=\\\"}\",d.remove_data="
### end: Delete data (dir/files) ###


### begin: Move data and meta (.torrent) file automatically of a finished or hashchecked torrent ( when you drop in 100% done torrent data and then have rtorrent check the data and resume seeding) ###
# helper method: returns the fullpath of its final data dir
method.insert = d.get_target_data_path, simple|private, "cat=$d.custom=data_dir,/,$d.name="
# helper method: returns true if the current path of the torrent data is equal to the fullpath of its final data dir, otherwise returns false
method.insert = d.compare_data_path, simple|private, "equal={d.get_target_data_path=,d.data_path=}"
# helper method: returns true if the target path of the torrent data exists, otherwise returns false
method.insert = d.target_data_path_exist, simple|private, "or=\"check_object.value=\\\"$cat=$d.custom=data_dir,/\\\",$d.name=,d\",\"check_object.value=\\\"$cat=$d.custom=data_dir,/\\\",$d.name=,f\""
# helper method: returns true if the current data path of the torrent exists, otherwise returns false
method.insert = d.data_full_path_exist, simple|private, "branch=d.is_multi_file=,\"check_object.value=$cat=$d.directory=,,d\",\"check_object.value=\\\"$cat=$d.directory=,/\\\",$d.name=,f\""
# insert a method which: sets path of torrent to equal the value of data_dir custom field; moves data to its final place; starts the download (to get updating its 'base path') when it's hashckecked or manually moved
#   Creating and using a custom variable with the 'd.data_path' method is necessary since we overwrite the 'd.directory' attribute before moving data.
method.insert = d.move_data, simple|private, "d.custom.set=data_full_path,$cat=$d.data_path= ;d.directory.set=$d.custom=data_dir;execute2=mv,-f,$d.custom=data_full_path,$d.custom=data_dir; branch=argument.0=,d.stop=; d.start="

# helper method: determines just the basename of a given meta (.torrent) file
method.insert = d.get_meta_basename, simple|private, "execute.capture=sh,-c,\"echo -n \$(basename \\\"$1\\\")\",getMetaBasename,$d.tied_to_file="
# helper method: the fullpath of its final meta dir
method.insert = d.get_target_meta_path, simple|private, "cat=$d.custom=meta_dir,/,$d.get_meta_basename="
# helper method: returns true if the current path of the meta (.torrent) file is equal to the fullpath of its final meta dir, otherwise returns false
method.insert = d.compare_meta_path, simple|private, "equal={d.get_target_meta_path=,d.tied_to_file=}"
# helper method: returns true if the target path of the meta (.torrent) file exists, otherwise returns false
method.insert = d.target_meta_path_exist, simple|private, "check_object.value=\"$cat=$d.custom=meta_dir,/\",$d.get_meta_basename=,f"
# helper method: returns true if the current meta path of the torrent exists, otherwise returns false
method.insert = d.meta_full_path_exist, simple|private, "check_object.value=$d.tied_to_file=,,f"
# insert a method which: moves meta (.torrent) file to its final place; updates the tied meta file path of the torrent (to keep seeding it)
method.insert = d.move_meta, simple|private, "execute2=mv,-f,$d.tied_to_file=,$d.custom=meta_dir;d.tied_to_file.set=$d.get_target_meta_path="

# helper method: moves both data and meta (.torrent) file if neither of them is in the final place and saves its session
method.insert = d.move_both, simple|private, "d.move_meta=; d.move_data=$argument.0=; d.save_resume="
# helper method: tries to move both data and meta file only if none of the targets exist nor they have already been moved (latter is necessary for hashckecking)
method.insert = d.move_both_check, simple|private, "branch=\"and={d.name=,not=$d.compare_meta_path=,not=$d.target_meta_path_exist=,d.meta_full_path_exist=,not=$d.compare_data_path=,not=$d.target_data_path_exist=,d.data_full_path_exist=}\",d.move_both=$argument.0="
# finally, set a key with the name 'move_both_f' that is triggered by the finished event: tries to move both data and meta (.torrent) file when it's finished
method.set_key = event.download.finished, move_both_f, "d.move_both_check="
# finally, set a key with the name 'move_both_h' that is triggered by the hash_done event: tries to move both data and meta (.torrent) file of a completed torrent when it's 100% hashchecked
#temp#method.set_key = event.download.hash_done, move_both_h, "branch=d.complete=,d.move_both_check=1"
method.set_key = event.download.hash_done, move_both_h, "branch=d.complete=,d.move_both_check=1"
### end: Move data and meta (.torrent) file automatically ###


### begin: Move data and meta (.torrent) file manually ###
# Dealing with delqueue dir entries and corresponding attribute (d.custom=unsafe_data is 2)
#   Usage: d.add_to_delqueue=  |  d.remove_from_delqueue=1  |  d.remove_from_delqueue=  |  d.fix_delqueue_flag=
# helper method: get delqueue symlink name
method.insert = d.get_delqueue_symlink_name, simple|private, "cat=$cfg.dir.delqueue=,$d.get_meta_basename="
# adds torrent to delqueue by creating a symlink in delqueue dir to its metafile and setting unsafe_data custom variable to "2"
method.insert = d.add_to_delqueue, simple, "d.unsafe_data.set=2; execute2=ln,-sf,$d.tied_to_file=,$d.get_delqueue_symlink_name="
# helper method: removes symlink (if it exists) for metafile from delqueue dir
method.insert = d.remove_symlink, simple|private, "branch=\"check_object.value=$cfg.dir.delqueue=,$d.get_meta_basename=,L\",\"execute2=rm,-f,--,$d.get_delqueue_symlink_name=\""
# removes torrent from delqueue by deleting its symlink (if it exists) from delqueue dir, if optional parameter "1" is given then assign it to unsafe_data
method.insert = d.remove_from_delqueue, simple, "branch=argument.0=,d.unsafe_data.set=1,d.unsafe_data.set=; d.remove_symlink="
# helper method: sets unsafe_data to "1" if the value exist, unsets it otherwise
method.insert = d.fix_delqueue_flag.helper, simple|private, "branch=\"d.custom=unsafe_data\",d.unsafe_data.set=1,d.unsafe_data.set="
# fixes unsafe_data values depending a symlink in delqueue dir exists or not
method.insert = d.fix_delqueue_flag, simple, "branch=\"and={d.custom=unsafe_data,\\\"check_object.value=$cfg.dir.delqueue=,$d.get_meta_basename=,L\\\"}\",d.unsafe_data.set=2,d.fix_delqueue_flag.helper="
# run the above d.fix_delqueue_flag every day at 1:19 AM, useful if symlinks are sometimes created manually or by a script in delqueue dir
schedule2 = fix_delqueue_flag, 1:19:00, 24:00:00, "d.multicall2=default,d.fix_delqueue_flag="

# Move a finished, stucked meta file from the downloading dir into its final place (thanks to the simetimes missing meta_dir custom field value, rtorrent bug on OpenWRT?)
#   Usage: 'd.move_meta_to=various'
# helper method: prints out an error message if there is any problem during moving meta file
method.insert = d.move_meta_to.error.print, simple|private, "print=\"$cat=ERROR\\\\\ during\\\\\ moving\\\\\ meta\\\\\ (.torrent)\\\\\ file:\\\\\ ,$argument.0=,\\\\\ !\""
# helper method: sets custom meta_dir property then tries to move meta (.torrent) file (if it's not moved already and if target meta file doesn't exist and if meta file of a torrent exist) or prints out an error message
method.insert = d.move_meta_to.check, simple|private, "d.custom.set=meta_dir,\"$cat=$cfg.dir.meta_compl=,$argument.0=\"; branch=\"and={not=$d.compare_meta_path=,not=$d.target_meta_path_exist=,d.meta_full_path_exist=}\",d.move_meta=,d.move_meta_to.error.print=$d.tied_to_file="
# helper method: calls the 'd.move_meta_to.check' method if the required directory exist, otherwise prints out an error
method.insert = d.move_meta_to.check_meta_dir, simple|private, "branch=\"check_object.value=$cfg.dir.meta_compl=,$argument.0=,d\",d.move_meta_to.check=$argument.0=,\"check_object.error.print=$cfg.dir.meta_compl=,$argument.0=,metafile,directory\""
# moves the finished, stucked meta file if there isn't any error, it receives 1 argument: dirname
method.insert = d.move_meta_to, simple, "branch=d.complete=,\"d.move_meta_to.check_meta_dir=$argument.0=\""

# Move data (can be partially downloaded) and meta (.torrent) file of a torrent into another directories at the same time and update all necessary attributes of it. It receives 3 arguments: dirname,specialgroup,unsafe_data
#   Usage: 'd.move_to=rotating,1,1' / 'd.move_to=rotating,1,2' or 'd.move_to=fullseed,1,' or 'd.move_to=unsafe,,1' / 'd.move_to=unsafe,,2' or 'd.move_to=various,,'
# helper method: sets everything it can and calls the other helper methods for the rest (stops it; sets the remaining attributes (throttle group, priority: based open the 2nd argument; sets the new data and meta dirs based open the 1st argument);
#   tries to move both data and meta; handles delete-queue and sets unsafe_data custom field value based open the 3rd argument)
method.insert = d.move_to.helper, simple|private, "d.stop=; d.attribs.set.helper=$argument.0=,$argument.1=; d.move_both_check=; branch=\"equal={argument.2=,cat=2}\",d.add_to_delqueue=,d.remove_from_delqueue=$argument.2="
# helper method: calls the 'd.move_to.helper' method which will does the job if the required meta directory also exists, otherwise prints out an error
method.insert = d.move_to.check_meta_dir, simple|private, "branch=\"check_object.value=$cfg.dir.meta_compl=,$argument.0=,d\",\"d.move_to.helper=$argument.0=,$argument.1=,$argument.2=\",\"check_object.error.print=$cfg.dir.meta_compl=,$argument.0=,metafile,directory\""
# helper method: calls the 'd.move_to.check_meta_dir' method which will check the meta dir if the required data directory exists, otherwise prints out an error
method.insert = d.move_to.check_data_dir, simple|private, "branch=\"check_object.value=$cfg.dir.main=,$argument.0=,d\",\"d.move_to.check_meta_dir=$argument.0=,$argument.1=,$argument.2=\",\"check_object.error.print=$cfg.dir.main=,$argument.0=,data,directory\""
# moves data (can be partially downloaded) and meta (.torrent) file if there isn't any error, it receives 3 arguments: dirname,specialgroup,unsafe_data
method.insert = d.move_to, simple, "d.move_to.check_data_dir=$argument.0=,$argument.1=,$argument.2="
### end: Move data and meta (.torrent) file manually ###

##### end: Directory methods #####



##### begin: Favouring special group of torrents over the rest #####

# helper method: Sets choke group to one of the default ones if there's no throttle or throttle is special one (NULL) otherwise sets it to one of the throttle name ones
method.insert = d.modify_choke_group, simple|private, "branch=((and,((d.throttle_name)),((not,((equal,((d.throttle_name)),((cat,NULL)))))))),((d.group.set,(cat,(d.throttle_name),_,(d.connection_current)))),((d.group.set,(cat,default_,(d.connection_current))))"
# helper method: Modifies the peers_min, peers_max, max_uploads values of a torrent for both downloading and uploading
method.insert = d.modify_slots, simple|private, "d.peers_min.set=(argument.0); d.peers_max.set=(argument.1); d.uploads_max.set=(argument.2)"
# Modifies the above properties for a torrent based on which group it belongs to
method.insert = d.modify_slots_both, simple, "branch=((not,(d.throttle_name))),((d.modify_slots,(throttle.min_peers.normal),(throttle.max_peers.normal),(throttle.max_uploads))),((d.modify_slots,(cfg.slowup.d.peers_min),(cfg.slowup.d.peers_max),(cfg.slowup.d.uploads_max)))"
# Modify both group values when a torrent is resumed (even after hashchecking or after rtorrent is restarted)
method.set_key = event.download.resumed, modify_slots_resumed_both, "d.modify_slots_both=; d.modify_choke_group="
method.set_key = event.download.finished, modify_finished_choke_group, "d.modify_choke_group="
method.set_key = event.download.partially_restarted, modify_partially_restarted_choke_group, "d.modify_choke_group="

# Gets current uprate in KB for special group
method.insert = get_uprate_main, simple, "math.max=0,(math.div,(math.sub,(throttle.global_up.rate),(throttle.up.rate,slowup),(throttle.up.rate,tardyup)),1024)"
# helper methods: get new uprate limit in KB (based on special group uprate) for slowup and tardyup throttle groups
method.insert = get_uprate_slowup,  simple|private, "math.min=(cfg.slowup.uprate.max),(math.max,(cfg.slowup.uprate.min),(math.sub,(cfg.slowup.uprate.max),(get_uprate_main),(math.div,(throttle.up.rate,tardyup),1024)))"
method.insert = get_uprate_tardyup, simple|private, "math.min=(cfg.tardyup.uprate.max),(math.max,(cfg.tardyup.uprate.min),(math.sub,(cfg.tardyup.uprate.max),(get_uprate_main),(math.div,(throttle.up.rate,slowup),1024)))"
# Set new uprate limit for slowup and tardyup throttle groups in every 20 seconds
schedule2     = adjust_throttle_slowup,  14, 20, "throttle.up=slowup,(cat,(get_uprate_slowup))"
schedule2     = adjust_throttle_tardyup, 15, 20, "throttle.up=tardyup,(cat,(get_uprate_tardyup))"

# helper method: get new global downrate limit in KB (based on special group uprate and given threshold values)
method.insert = get_downrate_global, simple|private, "branch=(and,((greater,((math.div,(throttle.global_up.rate),1024)),((cfg.global.upall.threshold)))),((greater,((get_uprate_main)),((cfg.global.upmain.threshold))))),(cfg.global.downrate.min),(cfg.global.downrate.max)"
# Set new global downrate limit in every 60 seconds
schedule2     = adjust_throttle_global_down_max_rate, 54, 60, "throttle.global_down.max_rate.set_kb=(get_downrate_global)"

# helper methods: get new upload slots limit for slowup_seed and tardyup_seed choke groups (based on their current uprate and the given cfg values)
method.insert = get_slots_slowup,  simple|private, "math.min=(cfg.slowup.slots.seed.max),(math.max,(math.div,(cfg.slowup.uprate.min),(cfg.global.slot.uprate.min)),(math.div,(throttle.up.rate,slowup),1024,(cfg.global.slot.uprate.min)))"
method.insert = get_slots_tardyup, simple|private, "math.min=(cfg.tardyup.slots.seed.max),(math.max,(math.div,(cfg.tardyup.uprate.min),(cfg.global.slot.uprate.min)),(math.div,(throttle.up.rate,tardyup),1024,(cfg.global.slot.uprate.min)))"
# Set new upload slots (unchoked peers) limit for slowup_seed and tardyup_seed choke groups in every 100 seconds
schedule2     = adjust_slots_slowup,  47, 100,"choke_group.up.max.set=slowup_seed,(cat,(get_slots_slowup))"
schedule2     = adjust_slots_tardyup, 48, 100,"choke_group.up.max.set=tardyup_seed,(cat,(get_slots_tardyup))"

##### end: Favouring special group of torrents over the rest #####



##### begin: Other enhancements #####

### begin: Handle magnet links specail way ###
# Start any magnet torrent from the "load" watch directory (that only loads downloads into rtorrent)
method.set_key = event.download.inserted_new, auto_start_meta_in_load_dir, "branch=\"and={d.is_meta=,not=$d.state=}\",d.start="

# helper method: compose the full path of the wrong meta file in "incomplete" dir
method.insert = d.get_wrong_magnet_meta_file_path,   simple|private, "cat=$cfg.dir.incomplete=,$d.hash=,.meta"
# helper method: compose the full path of the right torrent file in ".session" dir
method.insert = d.get_session_magnet_meta_file_path, simple|private, "cat=$cfg.dir.session=,$d.hash=,.torrent"
# helper method: compose the new full path of the right torrent file in one of the category of ".downloading" dir
method.insert = d.get_magnet_meta_file_path_downl,   simple|private, "cat=$cfg.dir.meta_downl=,$d.custom=orig_category,/,$d.name=,-,$d.hash=,.torrent"
# helper method: compose the new full path of the right torrent file in one of the category of ".queue" dir
method.insert = d.get_magnet_meta_file_path_queue,   simple|private, "cat=$cfg.dir.meta_queue=,$d.custom=orig_category,/,$d.name=,-,$d.hash=,.torrent"
# helper method: delete wrong meta file from "incomplete" dir
method.insert = d.delete_wrong_magnet_meta_file,     simple|private, "execute.nothrow={rm,-rf,--,$d.get_wrong_magnet_meta_file_path=}"
# helper method: copy the right torrent file from ".session" dir into another dir
method.insert = d.copy_session_magnet_meta_file,     simple|private, "execute.nothrow={cp,--,$d.get_session_magnet_meta_file_path=,$argument.0=}"
# helper method: copy right one into its proper ".downloading" dir, set d.tied_to_file property to it, delete the wrong one, saves session
method.insert = d.fix_magnet_tied_file,    simple|private, "d.copy_session_magnet_meta_file=$d.get_magnet_meta_file_path_downl=; d.tied_to_file.set=$d.get_magnet_meta_file_path_downl=; d.delete_wrong_magnet_meta_file=; d.save_resume="
# helper method: copy right one into its proper ".queue" dir, set a helper property, delete the meta download
method.insert = d.queue_magnet_meta_file,  simple|private, "d.copy_session_magnet_meta_file=$d.get_magnet_meta_file_path_queue=; d.custom.set=was_meta,1; d.erase="
# helper method: move the right torrent file from ".session" dir into its proper ".queue" or ".downloading" dir
method.insert = d.handle_magnet_meta_file, simple|private, "branch=((cfg.magnet_link.queue)),((d.queue_magnet_meta_file)),((d.fix_magnet_tied_file))"

# Handle torrent file of an initially magnet link when its download has been just started: move the right torrent file from ".session" dir into its proper ".queue" or ".downloading" dir if they exist
method.set_key = event.download.inserted_new, ~~handle_magnet_meta_file, "branch=\"and={\\\"check_object.value=$cat=$d.get_session_magnet_meta_file_path=,,f\\\",\\\"check_object.value=$cat=$d.get_wrong_magnet_meta_file_path=,,f\\\"}\",d.handle_magnet_meta_file="
### end: Handle magnet links specail way ###


# helper method: get the selected_size_bytes of a download if it's rotatable, otherwise 0
method.insert = d.get_rotating_size, simple|private, "branch=\"or=\\\"equal={d.custom=unsafe_data,cat=2}\\\",\\\"match=d.data_path=,\\\\\\\"$cat=.*,$cfg.dir.main=,.*(rotating|unsafe)\/.*\\\\\\\"\\\"\",d.selected_size_bytes=,cat=0"
# Get total size of rotating and unsafe downloads
method.insert = get_total_rotating_size, simple, "math.add=(d.multicall2,default,d.get_rotating_size=)"

# Get IPv4 address of a given interface
method.insert = get_interface_ipv4_address, simple|private, "execute.capture=bash,-c,\"$cat=\\\"echo -n \$(ip -o -4 addr show \\\",$argument.0=,\\\" | grep -Po 'inet \\\\\\\\\\K[\\\\\\\\\\d.]+')\\\"\""

# Get public IP address without the need of having dynamic DNS service, also works from behind NAT, through tunnel
method.insert = get_public_ip_address, simple|private, "execute.capture=bash,-c,\"eval echo -n \$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com)\""

# Format any valid timestamp value in human readable format (e.g.: 30/06/2013 23:47:33)
#   Usage: hrf_time=<<timefield>>  (e.g.: hrf_time=$d.creation_date=  ,  hrf_time=$d.custom=tm_last_scrape)
method.insert = hrf_time, simple, "branch=\"and={argument.0=,\\\"greater=argument.0=,cat=0\\\"}\", \"cat=$convert.date=$argument.0=, \\\" \\\", $convert.time=$argument.0=\""

# Regularly update scrape information for all torrents (even stopped ones), it won't affect the operation of rtorrent, but nice to have these values updated.
# This info is only updated when rtorrent starts or a torrent is added by default.
# Try to balance calls to not fire them up at the same time (since multiscraping isn't implemented in libtorrent). Check for update every 5 minutes and distinguish between 2 groups:
#   - transferring (uploading and/or downloading) torrents: update in every 10 minutes
#   - non-transferring torrents: update in every 12 hours
# helper method: sets current time in a custom field (tm_last_scrape) and saves session
method.insert = d.last_scrape.set, simple|private, "d.custom.set=tm_last_scrape,$cat=$system.time=; d.save_resume="
# helper method: sends the scrape request and sets the tm_last_scrape timestamp and saves session
method.insert = d.last_scrape.send_set, simple, "d.tracker.send_scrape=0;d.last_scrape.set="
# helper method: decides whether the required time interval (with the help of an argument) has passed and if so calls the above method
method.insert = d.last_scrape.check_elapsed, simple|private, "branch={(elapsed.greater,$d.custom=tm_last_scrape,$argument.0=),d.last_scrape.send_set=}"
# helper method: checks for non-existing/empty custom field to be able to test its validity later
method.insert = d.last_scrape.check, simple|private, "branch={d.custom=tm_last_scrape,d.last_scrape.check_elapsed=$argument.0=,d.last_scrape.send_set=}"
# sets custom field (tm_last_scrape) to current time only for torrents just has been added (skips setting time on purpose when rtorrent started)
method.set_key = event.download.inserted_new, ~last_scrape_i, "d.last_scrape.set="
# check for update every 5 minutes (300 sec) and update scrape info for transferring torrents in every 10 minutes (600-20=580 sec) and for non-transferring ones in every 12 hours (43200-20=43180 sec)
schedule2 = last_scrape_t, 300, 300, "d.multicall2=default,\"branch=\\\"or={d.up.rate=,d.down.rate=}\\\",d.last_scrape.check=$cfg.scrape_interval.active=,d.last_scrape.check=$cfg.scrape_interval.idle=\""

# Scrape a little after completion (on average after 30 sec)
pyro.collapsed_view.add = scheduled_scrape_once
view.filter = scheduled_scrape_once, ((false))
method.insert = pyro._add_to_scheduled_scrape_once, simple|private, "d.views.push_back_unique = scheduled_scrape_once; view.set_visible = scheduled_scrape_once"
method.set_key = event.download.finished, !add_to_scheduled_scrape_once, ((pyro._add_to_scheduled_scrape_once))
schedule2 = do_scheduled_scrape_once, 127, 60, ((d.multicall2, scheduled_scrape_once, "d.last_scrape.send_set=", "d.views.remove = scheduled_scrape_once", "view.set_not_visible = scheduled_scrape_once"))

##### end: Other enhancements #####

